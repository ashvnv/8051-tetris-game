A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: D:\Programs\Windows\Install_dir\KeilC51\C51\BIN\A51.EXE main.a51 SET(SMALL) DEBUG PRINT(.\Listings
                      \main.lst) OBJECT(.\Objects\main.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;====================================
                       2     ;       8051 TETRIS GAME
                       3     ;       AUTHOR: ASHWIN VALLABAN
                       4     ;       https://ashvnv.github.io/ashvnv/
                       5     ;====================================
                       6     
                       7     ;====================================================================================
                       8     ;       MIT License
                       9     ;
                      10     ;       Copyright (c) 2024 Ashwin Vallaban
                      11     ;
                      12     ;       Permission is hereby granted, free of charge, to any person obtaining a copy
                      13     ;       of this software and associated documentation files (the "Software"), to deal
                      14     ;       in the Software without restriction, including without limitation the rights
                      15     ;       to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                      16     ;       copies of the Software, and to permit persons to whom the Software is
                      17     ;       furnished to do so, subject to the following conditions:
                      18     ;
                      19     ;       The above copyright notice and this permission notice shall be included in all
                      20     ;       copies or substantial portions of the Software.
                      21     ;
                      22     ;       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                      23     ;       IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                      24     ;       FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                      25     ;       AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                      26     ;       LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                      27     ;       OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                      28     ;       SOFTWARE.
                      29     ;====================================================================================
                      30     
                      31     ; ALGORITHM IS MODULAR
                      32     ;       PART 1: DISPLAY. READ THE REGISTERS AND DISPLAY ALL THE VALUES
                      33     ;       PART 2: WHEN TIMER INTERRUPT OCCURS, MAKE A DOWN MOVEMENT AND UPDATE REGISTERS
                      34     ;       PART 3: WHEN SWITCH STATE IS READ, MAKE LEFT, RIGHT, CLK, ANTICLK OR DOWN MOVEMENT
                      35     
                      36     
                      37     ;############## PORTS ASSIGNED #################
                      38     ;PORT0 AND PORT1 FOR DRIVING THE DISPLAY
                      39     
                      40     ;INT0 FOR PCF8574A INTERRUPT
                      41     ;P3.6 FOR SCL
  00B6                42     SCL EQU P3.6
                      43     ;P3.7 FOR SDA
  00B7                44     SDA EQU P3.7
                      45             
                      46     ;***************************************
                      47     ;PORTS USED FOR SENDING DATA TO 4094 IC
                      48     ;***************************************
  00A0                49     DAT EQU P2.0
  00A1                50     CLK EQU P2.1
                      51             
  00B5                52     DISP_CLK EQU P3.5
                      53             
  00A2                54     CLR_SCORE EQU P2.2 ; HIGH PULSE WILL CLEAR THE 7 SEGMENTS
                      55     
                      56     ;############## REGISTERS USED #################
                      57     ;!!!!!!!!!!!!!!!!!! USED IN ISR !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     2

                      58     ;0x6F to 0x7E IS TO BE SHOWN ON THE DISPLAY
                      59     
                      60     ;0x3C STORING R1 POINTER VALUE FOR PRESERVING ISR
                      61     
                      62     ;0x3E FOR BACKING UP R1 AFTER ISR IS INITIATED
                      63     
                      64     ;0x25.0 IS USED IN DISPLAY SUBROUTINE. IF CLR THEN STAGE 1 EXECUTED AFTER INTERRUPT IS SERV
                             ICES ELSE STAGE 2
                      65     ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                      66     
                      67     ;7FH TO 75H FOR STORING DISPLAY VALUES
                      68     ;20H & 21H FOR STORING CURRENT SHAPE VALUE
                      69     ;0H AND 1H FOR POINTERS
                      70     ;2H STORES THE 0s COUNT
                      71     ;7H AND 6H ARE THE COUNTERS
                      72     ;R5 STORES THE TIMER1 OVERFLOW COUNTER
                      73     
                      74     ;SCORES ARE STORED IN 0x43
                      75     ;EACH SHAPE HAS NUMBER OF 0s WHICH ARE COUNTED. PLAYER WHO CAN 
                      76     ;       FIT THE MOST NUMBER OF SHAPES IN THE DISPLAY WINS
                      77     
                      78     
                      79     ;F0 FLAG INDICATED START OF THE SCAN IF SET AND SEND OF THE SCAN IF 0
                      80     ;26.0 FOR LEFT MOVEMENT
                      81     ;26.1 FOR RIGHT MOVEMENT
                      82     ;26.2 FOR CLK MOVEMENT
                      83     ;26.3 FOR ANTI CLK MOVEMENT
                      84     ;26.4 FOR INDICATING IF CANCEL OPERATION PERFORMED
                      85     ;26.5 FOR INDICATING IF SWITCH STATE CHANGED
                      86     ;26.6 IF SET THEN ENABLE HIGH SPEED FALL TIME OF SHAPES
                      87     
                      88     ;26.7 RESTART THE GAME
                      89     
                      90     ;TWO SCORING METHODS AVAILABLE.
                      91     ;ONE IS TO COUNT THE 0s IN THE SHAPE DISPLAY ON 7 SEGMENT
                      92     ;SECOND IS TO CHECK IF A ROW IS FULL. IF YES THEN SHIFT ROWS BY ONE AND GIVE A POINT
                      93     ;SET 0x23.0 INDICATES TO USE THE SECOND METHOD
                      94     
                      95     
  0004                96     SHP_SRT_LOC EQU 0x04
  0003                97     SHP_BIT_LOC EQU 0x03
                      98             
  0024                99     SHP_COUNT EQU 0x24
                     100             
  0037               101     COUNT_BACKUP EQU 0x37
                     102     
                     103     
                     104     ;######### Configure Interrupt Service Routine ########
0000                 105     ORG 0000H
0000 020100          106             LJMP START
                     107     
0003                 108     ORG 0003H ;IE0 INTERRUPT (PIN INT0) INT0 LEFT MOVEMENT
0003 D235            109             SETB 0x26.5
                     110             ;SET SWITCH STATE CHANGED FLAG
0005 32              111             RETI
                     112     
                     113     
000B                 114     ORG 000BH ;TIMER0 OVERFLOW COUNTER
                     115             ;USING 16BIT TIMER
000B 0D              116             INC R5; INCREMENT THE OVERFLOW COUNTER
000C 32              117             RETI
                     118             
0013                 119     ORG 0013H ;IE1 INTERRUPT (PIN INT1) RESTART THE GAME TRIGGER
0013 D237            120             SETB 0x26.7 ;SET THE RESET FLAG
0015 32              121             RETI
                     122             
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     3

                     123     ;ADDED IN rev1
001B                 124     ORG 001BH
                     125             ;DISPLAY UPDATE
                     126             ;TIMER 1 OVERFLOW OCCURS HERE
                     127             ;THIS ROUTINE IS USED FOR UPDATING THE DISPLAY
                     128     
                     129             ;0x54 IS THE 8 BIT COUNTER
                     130             ;0x39 HAS THE ADDRESS OFFSET OF THE PARTICULAR CHARACTER [UNIT 1 DISP]
                     131             ;0x3A HAS THE ADDRESS OFFSET OF THE PARTICULAR CHARACTER [UNIT 2 DISP]
                     132             
001B C28E            133             CLR TR1
                     134             
001D 85013E          135             MOV 0x3E, 0x01; BACKUP R1 POINTER
                     136             
0020 853C01          137             MOV 0x01, 0x3C; RESTORE R1 POINTER
                     138             
                     139             ;-------------- LOGIC STARTS HERE -------------
0023 20280F          140             JB 0x25.0, STAGE_2_DISPLAY
                     141             
                     142             
                     143             ;---------- STAGE 1 -------------
0026                 144             REPEAT_CYCLE:
0026 797E            145             MOV R1, #0x7E
                     146             
0028 C2A1            147             CLR CLK
002A D2A0            148             SETB DAT
002C D2A1            149             SETB CLK
                     150             
002E                 151             REPEAT:
                     152     
002E 8780            153             MOV P0, @R1
                     154             ;---------- STAGE 1 END ----------
                     155             
0030 D228            156             SETB 0x25.0
0032 020047          157             LJMP RETURN_FROM_DISPLAY_SUBR
                     158             
                     159             
0035                 160             STAGE_2_DISPLAY:
                     161             ;----------- STAGE 2 -------------
0035 7580FF          162             MOV P0, #0xFF; CLEAR THE PORT
0038 C2A1            163             CLR CLK
003A C2A0            164             CLR DAT
003C D2A1            165             SETB CLK
003E 19              166             DEC R1
                     167             
003F B96E03          168             CJNE R1, #0x6E, CONT_CYCLE
0042 020026          169             LJMP REPEAT_CYCLE
                     170             
0045                 171             CONT_CYCLE:
0045 80E7            172             SJMP REPEAT
                     173             ;---------- STAGE 2 ENDS -------
                     174             
                     175             
                     176             
                     177             ;----------------------------------------------
                     178             
0047                 179             RETURN_FROM_DISPLAY_SUBR:
0047 85013C          180             MOV 0x3C, 0x01; BACKUP R1 POINTER
                     181             
004A 853E01          182             MOV 0x01, 0x3E; RESTORE R1 POINTER
                     183             
004D 758B00          184             MOV TL1, #0x00
0050 D28E            185             SETB TR1
0052 32              186             RETI
                     187             
                     188     
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     4

                     189     ; MAIN PROGRAM STARTS HERE
0100                 190     ORG 100H
0100                 191             START:
                     192             ;********** CLEAR THE RAM *****************
                     193             ;USING REGISTERS FROM 7FH TO 6FH
0100 750708          194             MOV 0x07, #0x08;INIT THE COUNTER
0103 787F            195             MOV R0,#0x7F; INIT THE POINTER
0105                 196             REPEAT_RAM_CLEAR:
0105 76FF            197             MOV @R0, #0xFF;
0107 18              198             DEC R0
0108 B86EFA          199             CJNE R0, #0x6E, REPEAT_RAM_CLEAR
                     200             
                     201             ;MOV 0x75, #0x00; MARK END BOUND
                     202             
                     203             ;CLEAR THE PORT
010B 75A000          204             MOV P2, #0x00
010E 7580FF          205             MOV P0, #0xFF
                     206             
0111 C2D5            207             CLR F0; CLEAR THE SCAN FLAG
                     208             
0113 754300          209             MOV 0x43, #0x00; CLEAR THE SCORE REGISTER
                     210             
                     211             ;RAM CLEAR COMPLETE
                     212             ;********** RAM CLEAR COMPLETE ************
                     213             
                     214             ;RESET 4026
0116 C2A2            215             CLR CLR_SCORE
0118 D2A2            216             SETB CLR_SCORE
011A C2A2            217             CLR CLR_SCORE
                     218             
011C C237            219             CLR 0x26.7; CLEAR THE GAME RESTART FLAG
                     220             
                     221             ;CLR 0x23.0; USE THE FIRST SCORING METHOD
011E D218            222             SETB 0x23.0; USE THE SECOND SCORING METHOD
                     223             
                     224             
0120 752600          225             MOV 0x26, #0x00; CLEAR ALL THE FLAGS
0123 D288            226             SETB IT0; FALLING EDGE INTERRUPT FOR INT0
0125 D28A            227             SETB IT1; FALLING EDGE INTERRUPT FOR INT1
                     228             
                     229             ;********** CONFIGURE THE TIMER IN 16 BIT MODE ************
0127 7D00            230             MOV R5, #0x00; TIMER OVERFLOW COUNTER. CHECK IF 15 THEN 1 SEC ELAPSED
0129 758921          231             MOV TMOD, #0x21; TIMER0 IN 16BIT MODE, TIMER 1 IN 8 BIT AUTORELOAD
012C 75A88F          232             MOV IE, #0x8F; EABLE GLOBAL INTERRUPT, TIMER 0, TIMER 1 INTERRUPT AND INT0 INTERRUPT
012F D28C            233             SETB TR0; RUN THE TIMER
                     234             
                     235     ;       --------- DEFINE TIMER0 FOR DISPLAY UPDATE --------
                     236             ;MOV TMOD, #0x21; TIMER 1 8 BIT AUTORELOAD, TIMER 0 IN 16 BIT MODE
0131 758D00          237             MOV TH1, #0x00
0134 758B00          238             MOV TL1, #0x00
                     239             
0137 C228            240             CLR 0x25.0
                     241             ;SETB EA
                     242             ;SETB ET1; TIMER 0 OVERFLOW INTERRUPT
0139 D28E            243             SETB TR1
                     244             
                     245             ;MODIFIED IN rev1
                     246     ;       ;********** CONFIGURE SERIAL PORT *************************
                     247     ;       ;SERIAL RECEIVE DOESN'T WORK. IT CAN BE A BUG
                     248     ;       MOV A, TMOD
                     249     ;       ORL A, #0x20; TIMER1, MODE 2 AUTO RELOAD
                     250     ;       MOV TMOD, A
                     251     ;       MOV TH1, #0xFD; 9600 BAUD RATE
                     252     ;       MOV SCON, #0x50; 8 BIT UART, REN ENABLED
                     253     ;       SETB TR1; TURN ON THE TIMER (SERIAL COMM ENABLED)
                     254     
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     5

                     255     ;       CONFIGURE SERIAL PORT
                     256             ;SETUP SERIAL COMM FOR DISPLAYING THE DATA
013B 759840          257             MOV SCON, #0x40; MODE 1 VARIABLE BAUD RATE
                     258             ;TIMER 2 FOR GENERATING BAUD RATE
                     259             ;CRYSTAL FREQ: 11.0592 MHZ
                     260             ;CALCULATED RCAP2H & RCAP2L VALUES FOR 9600 BAUD RATE IS 1996
013E 75CBFF          261             MOV 0xCB, #0xFF; RCAP2H
0141 75CADC          262             MOV 0xCA, #0xDC; RCAP2L
0144 75C810          263             MOV 0xC8, #0x10; T2CON  
                     264             
                     265             
0147 020165          266             LJMP DISPLAY
                     267     
                     268     
0150                 269     ORG 150H
                     270             ;DELAY FOR MULTIPLEXING
0150                 271             DELAY:
0150 7EFF            272             MOV R6, #255D
0152 DEFE            273             WAIT: DJNZ R6, WAIT
0154 22              274             RET
                     275     
0165                 276     ORG 165H
0165                 277             DISPLAY:
0165 D2AF            278             SETB EA; ENABLE INTERRUPS
0167 C234            279             CLR 0x26.4
                     280             
                     281             ;MODIFIED IN rev1
                     282     ;       ;USING REGISTERS FROM 7EH TO 75H
                     283     ;       MOV R0, #0x7E;INIT THE POINTER
                     284     ;;      MOV A, #0x01; INIT THE SCAN ROW POINTER
                     285     
                     286     ;       ;INITIALLY SEND 1
                     287     ;       CLR CLK
                     288     ;       SETB DAT
                     289     ;       SETB CLK
                     290     
0169                 291             INFINITE_DISP:
                     292             ;MODIFIED IN rev1
                     293     ;       MOV P0, @R0
                     294     ;       LCALL DELAY
                     295     ;       MOV P0, #0xFF; CLEAR THE PORT
                     296     ;       CLR CLK
                     297     ;       CLR DAT
                     298     ;       SETB CLK
                     299     ;       DEC R0
                     300     
                     301             ;#########################################
0169 309807          302             JNB RI, RESTART_CHECK
                     303             ;RECEIVED DATA SERIALLY.
                     304             ;I AM NOT SURE BUT THIS DOES NOT WORK
                     305             ;IF RI IS SET, THE DATA IS RECEIVED. READ SBUF AND DECODE THE ACTION TO PERFORM
016C E599            306             MOV A, SBUF
016E C298            307             CLR RI; CLEAR FLAG
0170 759000          308             MOV P1, #0x00; FOR TESTING TO SEE IF SERIAL RECEIVE WORKS. IF RECEIVE SUCCESSFUL PO
                             RT 1 IS MODE LOW
                     309             ;#########################################
                     310             
0173                 311             RESTART_CHECK:
                     312             ;CHECK IF RESTART BUTTON TRIGGERED
0173 303703          313             JNB 0x26.7, CHECK_SWITCH_STATE
0176 020100          314             LJMP START; RESTART THE GAME
                     315             
0179                 316             CHECK_SWITCH_STATE:
0179 303553          317             JNB 0x26.5, RESUME_TASK
017C C235            318             CLR 0x26.5;CLEAR THE FLAG
                     319             
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     6

                     320             ;SWITCH STATE CHANGED. GET THE CHANGED STATE
                     321             ;--- CHECK THE STATE OF THE BUTTONS -----
                     322             ;SEND START CONDITION
017E 120680          323                LCALL STARTC
                     324                
                     325             ;SEND SLAVE ADDRESS
0181 7471            326                MOV A,#0x71 ;PCF8574 ADDRESS WITH READ MODE
0183 120730          327                LCALL SEND
                     328                
                     329             ;RECEIVE DATA
0186 120780          330                LCALL RECV
0189 120750          331                LCALL ACK
                     332             
                     333             ;STOP CONDITION
018C 120700          334                LCALL STOP
                     335                
                     336             ;DECODE WHICH BUTTON WAS CLICKED
                     337             ;       P7      P6      P5      P4      P3      P2      P1      P0
                     338             ;                          DOWN  L  R  ACLK CLK
                     339                     
018F F4              340                     CPL A; COMPLEMENT A
0190 F534            341                     MOV 0x34, A; TEMPORARILY STORE CURRENT BUTTON STATE
0192 6535            342                     XRL A, 0x35; XOR CURRENT BUTTON STATE AND OLD BUTTON STATE
                     343                     
0194 F536            344                     MOV 0x36, A; STORE XOR RESULT IN TEMP REGISTER
                     345                     
0196 5534            346                     ANL A, 0x34; SWITCH OPEN-CLOSE-OPEN will cause INC/DEC by 1
                     347                     
0198 F527            348             MOV 0x27, A
                     349             
019A 303809          350             JNB 0x27.0, CHECK_NEXT_BTN0
                     351             ;CLOCKWISE
019D D232            352             SETB 0x26.2; CLK FLAG SET
019F 120395          353             LCALL CLK_MOVEMENT
01A2 C232            354             CLR 0x26.2; CLEAR THE FLAG
01A4 8023            355             SJMP DONE_BTN_MOVEMENT
                     356             
01A6                 357             CHECK_NEXT_BTN0:
01A6 303909          358             JNB 0x27.1, CHECK_NEXT_BTN1
                     359             ;ANTI CLOCKWISE
01A9 D233            360             SETB 0x26.3; ANTICLK FLAG SET
01AB 120395          361             LCALL CLK_MOVEMENT
01AE C233            362             CLR 0x26.3; CLEAR THE FLAG
01B0 8017            363             SJMP DONE_BTN_MOVEMENT
                     364             
01B2                 365             CHECK_NEXT_BTN1:
01B2 303A05          366             JNB 0x27.2, CHECK_NEXT_BTN2
                     367             ;RIGHT
01B5 120355          368             LCALL RIGHT_MOVEMENT
01B8 800F            369             SJMP DONE_BTN_MOVEMENT
                     370             
01BA                 371             CHECK_NEXT_BTN2:
01BA 303B05          372             JNB 0x27.3, CHECK_NEXT_BTN3
                     373             ;LEFT
01BD 120320          374             LCALL LEFT_MOVEMENT
01C0 8007            375             SJMP DONE_BTN_MOVEMENT
                     376             
01C2                 377             CHECK_NEXT_BTN3:
01C2 303C04          378             JNB 0x27.4, DONE_BTN_MOVEMENT
                     379             ;INCREASE FALL SPEED OF SHAPES
01C5 D236            380             SETB 0x26.6
01C7 8000            381             SJMP DONE_BTN_MOVEMENT          
                     382                
01C9                 383             DONE_BTN_MOVEMENT:
                     384             ;MOVE CURRENT BUTTON STATE TO 0x35
01C9 853435          385             MOV 0x35, 0x34;
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     7

01CC 020165          386             LJMP DISPLAY
                     387             
                     388             ;#############################
01CF                 389             RESUME_TASK:
                     390             ;CJNE R0, #0x6E, INFINITE_DISP ;MODIFIED IN rev1
                     391             ;CJNE R5, #0x08, DISPLAY
                     392             
01CF 203608          393             JB 0x26.6, HIGH_SPEED
01D2 C3              394             CLR C
01D3 7408            395             MOV A, #0x08; SET LOW SPEED HERE
01D5 9D              396             SUBB A, R5; SUBTRACT
01D6 500A            397             JNC GO_BACK_DISP
01D8 800B            398             SJMP SKIP_SPEED_CHK
                     399             
01DA                 400             HIGH_SPEED:
                     401     ;;      CJNE R5, #0x01, GO_BACK_DISP
01DA C3              402             CLR C
01DB 7400            403             MOV A, #0x00; SET HIGH SPEED HERE
01DD 9D              404             SUBB A, R5; SUBTRACT
01DE 5002            405             JNC GO_BACK_DISP
                     406             
01E0 8003            407             SJMP SKIP_SPEED_CHK
                     408     ;       
01E2 020165          409             GO_BACK_DISP: LJMP DISPLAY
                     410     ;       
01E5                 411             SKIP_SPEED_CHK:
01E5 C2AF            412             CLR EA; DISABLE ALL INTERRUPTS
                     413             ;CHECK IF THE F0 FLAG IS SET OR NOT. IF IT IS SET, GO TO DOWN_MOVEMENT ELSE PUT A N
                             EW SHAPE IN 7F,7E,7D
01E7 20D535          414             JB F0, DOWN_MOVEMENT; F0 IS SET. CONTINUE SCANNING THE DISPLAY
                     415             ;F0 IS CLEARED. INTRODUCE A NEW SHAPE
01EA E58A            416             MOV A, TL0; FOR GETTING RANDOM SHAPE
01EC 5407            417             ANL A, #0x07; MASK. 8 SHAPES CAN BE DEFINED
                     418             
                     419     ;       SHAPES STORED IN LOCATIONS 0x28, 0x29, 0x2A
01EE 1207A0          420             LCALL GET_SHAPE; WITH RANDOM NUM IN A
                     421             ;A HAS THE ADDRESS OF THE SHAPE
                     422             ;BACKUP THE ADDRESS IN A REGISTER
01F1 FE              423             MOV R6, A
01F2 1207A0          424             LCALL GET_SHAPE
                     425             ;USING LOC 28H TO 2AH FOR BACKING UP CURRENT SHAPE
01F5 F528            426             MOV 0x28, A
01F7 1202A0          427             LCALL CALC_SCORE; COUNT NUM OF ZEROS
01FA 0E              428             INC R6
01FB EE              429             MOV A, R6
01FC 1207A0          430             LCALL GET_SHAPE
01FF F529            431             MOV 0x29, A
0201 1202A0          432             LCALL CALC_SCORE; COUNT NUM OF ZEROS
0204 0E              433             INC R6
0205 EE              434             MOV A, R6
0206 1207A0          435             LCALL GET_SHAPE
0209 F52A            436             MOV 0x2A, A
020B 1202A0          437             LCALL CALC_SCORE; COUNT NUM OF ZEROS
                     438             
                     439     ;WRITE TO THE RAM
020E 85287F          440             MOV 0x7F, 0x28;
0211 85297E          441             MOV 0x7E, 0x29;
0214 852A7D          442             MOV 0x7D, 0x2A
                     443     
                     444             
                     445     ;       ;USING LOC 34H TO 36H FOR BACKING UP CURRENT SHAPE
                     446     ;       MOV 0x28, #0xFB
                     447     ;       MOV 0x29, #0xE3
                     448     ;       MOV 0x2A, #0xFF
                     449             
0217 75047F          450             MOV SHP_SRT_LOC, #0x7F; INDICATES WHERE THE CURRENT SHAPE STARTS
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     8

021A 750303          451             MOV SHP_BIT_LOC, #0x03; INDICATES THE MIDDLE BIT POSITION OF CURRENT SHAPE
                     452             
021D D2D5            453             SETB F0
                     454             
                     455             ;CONTINUE WITH DOWN MOVEMENT
                     456             
021F                 457             DOWN_MOVEMENT:
                     458             ;MOVE THE SHAPE DOWN
021F 7D00            459             MOV R5, #0x00; RESET OVERFLOW COUNTER
                     460             ;------------------------------------
                     461             
                     462             ;COUNT TOTAL 0s IN SHP_STR_LOC {0 TO 3}
                     463             ;BACK UP THE LOCATIONS SHP_STR_LOC {0 TO 3}
                     464             ;THEN REMOVE THE CURRENT PATTERN BY ANL AND XRL
                     465             ;AFTER THAT ANL THE CURRENT PATTERN AT SHP_SRT_LOC {1 TO 3}
                     466             ;NOW COUNT THE NUMBER OF 0s IN SHP_STR_LOC {0 TO 3}
                     467             ;IF THE COUNT IS SAME, CONTINUE ELSE CANCEL AND RESTORE THE BACKUP
                     468             
0221 120550          469             LCALL PARTA
                     470             
                     471             
                     472             ;ADD THE PATTERN TO THE NEW LINE
0224 A804            473             MOV R0, SHP_SRT_LOC
0226 18              474             DEC R0
                     475             
0227 E528            476             MOV A, 0x28
0229 56              477             ANL A, @R0;PATTERN ADDED TO NEW LINE
022A F6              478             MOV @R0, A
                     479             
022B 18              480             DEC R0
022C E529            481             MOV A, 0x29
022E 56              482             ANL A, @R0;PATTERN ADDED TO NEW LINE
022F F6              483             MOV @R0, A
                     484             
0230 18              485             DEC R0
0231 E52A            486             MOV A, 0x2A
0233 56              487             ANL A, @R0;PATTERN ADDED TO NEW LINE
0234 F6              488             MOV @R0, A
                     489             
0235 120600          490             LCALL PARTB
                     491             
                     492             ;ADDED IN rev1
                     493     ;       JB 0x26.6, SKIP_SERIAL_STATE_SEND
                     494     ;       MOV A, 0x44
                     495     ;       JNZ CONT_WITHOUT_SENDING_STATE
                     496     ;       MOV 0x44, #0x04; COUNT 4
                     497     ;       ACALL SEND_SERIAL_STATE
                     498     ;       
                     499     ;       CONT_WITHOUT_SENDING_STATE:
                     500     ;       DEC 0x44
                     501     ;       
                     502     ;       SKIP_SERIAL_STATE_SEND:
0238 30340A          503             JNB 0x26.4, RESUME_AGAIN
023B C2D5            504             CLR F0; CLEAR THE SCAN FLAG
023D C236            505             CLR 0x26.6; CLEAR HIGH SPEED
                     506             
023F 301803          507             JNB 0x23.0, SERIAL_SCORE
                     508             ;CALCULATE THE SCORE USING SECOND METHOD
0242 1207D0          509             LCALL CALC_SCORE2
                     510             
0245                 511             SERIAL_SCORE:
                     512             ;rev1: SEND THE GAME STATE TO EEPROM
                     513                     ;       MOV SBUF, 0x43; SHOWS THE CURRENT SCORE IN THE TERMINAL
                     514                     ;       WAIT_FOR_TRANS: JNB TI, WAIT_FOR_TRANS
                     515                     ;       CLR TI
                     516                     ;ACALL SEND_SERIAL_STATE
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE     9

                     517             
0245                 518             RESUME_AGAIN:
0245 1504            519             DEC SHP_SRT_LOC
0247 020165          520             LJMP DISPLAY
                     521             
                     522     ;ADDED IN rev1
                     523     ;SEND_SERIAL_STATE:
                     524     ;                       
                     525     ;                       MOV 0x40, R0; BACKUP R1
                     526     ;                       MOV R0, #0x7E
                     527     ;                       MOV 0x42, #16; COUNTER
                     528     ;                       
                     529     ;                       SETB 0xC8.2; START THE TIMER 2                  
                     530     ;                       
                     531     ;                       REPEAT_STATE_SEND1:
                     532     ;                       MOV 0x41, #8; COUNTER
                     533     ;                       
                     534     ;                       MOV A, @R0
                     535     ;                       
                     536     ;                       REPEAT_STATE_SEND:
                     537     ;                       ;CLR EA; CARRY SHOULD NOT BE SET
                     538     ;                       CLR C
                     539     ;                       RLC A
                     540     ;                       JNC SEND_0_STATE_SERIAL
                     541     ;                       
                     542     ;                       ;TO REMOVE DISPLAY FLUCTUATIONS
                     543     ;                       SETB EA
                     544     ;                       CLR EA
                     545     ;                       
                     546     ;                       ;SEND 1
                     547     ;                       MOV SBUF, #0x30; SEND THE GAME STATE (0)
                     548     ;                       WAIT_FOR_TRANS: JNB TI, WAIT_FOR_TRANS
                     549     ;                       CLR TI
                     550     ;                       SJMP DONE_SEND_CURRENT
                     551     ;                       
                     552     ;                       SEND_0_STATE_SERIAL:
                     553     ;                       MOV SBUF, #0x31; SEND THE GAME STATE (0)
                     554     ;                       WAIT_FOR_TRANS2: JNB TI, WAIT_FOR_TRANS2
                     555     ;                       CLR TI
                     556     ;                       
                     557     ;                       DONE_SEND_CURRENT:
                     558     ;                       DJNZ 0x41, REPEAT_STATE_SEND
                     559     ;                       
                     560     ;                       ;SEND A NEW LINE CHARACTER
                     561     ;                       MOV SBUF, #0x0D; CR
                     562     ;                       WAIT_FOR_TRANS1: JNB TI, WAIT_FOR_TRANS1
                     563     ;                       CLR TI
                     564     ;                       
                     565     ;                       DEC R0
                     566     ;                       DJNZ 0x42, REPEAT_STATE_SEND1
                     567     ;                       
                     568     ;                       ;SEND A NEW LINE CHARACTER
                     569     ;                       MOV SBUF, #0x0D; CR
                     570     ;                       WAIT_FOR_TRANS_PART: JNB TI, WAIT_FOR_TRANS_PART
                     571     ;                       CLR TI
                     572     ;                       
                     573     ;                       
                     574     ;;                      ;NOW SEND A PARTITION
                     575     ;;                      MOV 0x41, #8; COUNTER
                     576     ;;                      
                     577     ;;                      REPEAT_SEND_PARTITION:
                     578     ;;                      MOV SBUF, #0x2D; SEND DASH
                     579     ;;                      WAIT_FOR_TRANS_PART: JNB TI, WAIT_FOR_TRANS_PART
                     580     ;;                      CLR TI
                     581     ;;                      DJNZ 0x41, REPEAT_SEND_PARTITION
                     582     ;;                      
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    10

                     583     ;;;                     ;SEND A NEW LINE CHARACTER
                     584     ;;                      MOV SBUF, #0x0D; CR
                     585     ;;                      WAIT_FOR_TRANS_PART1: JNB TI, WAIT_FOR_TRANS_PART1
                     586     ;;                      CLR TI
                     587     ;                       
                     588     ;                       MOV R0, 0x40; RESTORE R0
                     589     ;                       CLR 0xC8.2; STOP THE TIMER 2
                     590     ;                       
                     591     ;                       
                     592     ;                       RET
                     593                             
                     594     
                     595     
                     596     
02A0                 597     ORG 2A0H
                     598             ;COUNT THE ZEROS IN A AND STORE IN 0x43 SCORE REGISTER
02A0                 599             CALC_SCORE:
                     600             
02A0 20180D          601             JB 0x23.0, SKIP_FIRST_METH; USING SECOND METHOD. SKIP THE FIRST METHOD
                     602             
02A3 7F08            603             MOV R7, #0x08
                     604             
02A5                 605             CHECK_ZEROS:
02A5 33              606             RLC A
02A6 4006            607             JC SKIP_SCORE_INC
02A8 0543            608             INC 0x43
02AA C2B5            609             CLR DISP_CLK
02AC D2B5            610             SETB DISP_CLK
02AE                 611             SKIP_SCORE_INC:
02AE DFF5            612             DJNZ R7, CHECK_ZEROS
                     613             
02B0                 614             SKIP_FIRST_METH:
02B0 22              615             RET
                     616     
0300                 617     ORG 300H
                     618             ;FOR COUNTING 0s AND STORE IN R2
0300                 619             COUNT_ZERO:
0300 A804            620             MOV R0, SHP_SRT_LOC
0302 7A00            621             MOV R2, #0x00;0 COUNTER
                     622             
0304 7E04            623             MOV R6, #0x04
                     624             
0306                 625             REPEAT_AGAIN:
0306 E6              626             MOV A, @R0
0307 7F08            627             MOV R7, #0x08
                     628             
0309                 629             REPEAT_COUNT:
0309 33              630             RLC A
030A 4001            631             JC SKIP_INC
030C 0A              632             INC R2
030D                 633             SKIP_INC:
030D DFFA            634             DJNZ R7, REPEAT_COUNT
                     635             
030F 18              636             DEC R0
0310 DEF4            637             DJNZ R6, REPEAT_AGAIN
0312 22              638             RET
                     639             
0320                 640     ORG 320H
                     641             ;FOR LEFT MANIPULATION
0320                 642             LEFT_MOVEMENT:
                     643             
0320 120550          644             LCALL PARTA
                     645             
                     646     
                     647             ;ADD THE PATTERN 
0323 A804            648             MOV R0, SHP_SRT_LOC
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    11

                     649             
0325 E528            650             MOV A, 0x28
0327 D3              651             SETB C
0328 33              652             RLC A
0329 F528            653             MOV 0x28, A
032B 56              654             ANL A, @R0;PATTERN ADDED TO NEW LINE
032C F6              655             MOV @R0, A
                     656             
032D 18              657             DEC R0
032E E529            658             MOV A, 0x29
0330 D3              659             SETB C
0331 33              660             RLC A   
0332 F529            661             MOV 0x29, A
0334 56              662             ANL A, @R0;PATTERN ADDED TO NEW LINE
0335 F6              663             MOV @R0, A
                     664             
0336 18              665             DEC R0
0337 E52A            666             MOV A, 0x2A
0339 D3              667             SETB C
033A 33              668             RLC A
033B F52A            669             MOV 0x2A, A
033D 56              670             ANL A, @R0;PATTERN ADDED TO NEW LINE
033E F6              671             MOV @R0, A
                     672             
                     673     
033F 120600          674             LCALL PARTB
0342 203402          675             JB 0x26.4, NEXT_CMD_CONT
0345 0503            676             INC SHP_BIT_LOC
                     677             
0347                 678             NEXT_CMD_CONT:
0347 22              679             RET
                     680             
                     681             
0355                 682     ORG 355H
0355                 683             RIGHT_MOVEMENT:
0355 120550          684             LCALL PARTA
                     685             
                     686     
                     687             ;ADD THE PATTERN 
0358 A804            688             MOV R0, SHP_SRT_LOC
                     689             
035A E528            690             MOV A, 0x28
035C D3              691             SETB C
035D 13              692             RRC A
035E F528            693             MOV 0x28, A
0360 56              694             ANL A, @R0;PATTERN ADDED TO NEW LINE
0361 F6              695             MOV @R0, A
                     696             
0362 18              697             DEC R0
0363 E529            698             MOV A, 0x29
0365 D3              699             SETB C
0366 13              700             RRC A
0367 F529            701             MOV 0x29, A
0369 56              702             ANL A, @R0;PATTERN ADDED TO NEW LINE
036A F6              703             MOV @R0, A
                     704             
036B 18              705             DEC R0
036C E52A            706             MOV A, 0x2A
036E D3              707             SETB C
036F 13              708             RRC A
0370 F52A            709             MOV 0x2A, A
0372 56              710             ANL A, @R0;PATTERN ADDED TO NEW LINE
0373 F6              711             MOV @R0, A
                     712             
                     713     
0374 120600          714             LCALL PARTB
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    12

0377 203402          715             JB 0x26.4, NEXT_CMD_CONT1
037A 1503            716             DEC SHP_BIT_LOC
                     717             
037C                 718             NEXT_CMD_CONT1:
037C 22              719             RET
                     720     
                     721             
0395                 722     ORG 395H
0395                 723             CLK_MOVEMENT:
                     724             ;DO TRANSPOSE
                     725             ;CURRENT SHAPE IN REG 28H, 29H, 2AH
                     726             ;NEW SHAPE IN REG 2BH, 2CH, 2DH
                     727             
0395 120550          728             LCALL PARTA
                     729             
                     730             ;ROTATE THE SHAPE REG TO START
0398 AF03            731             MOV R7, SHP_BIT_LOC
039A 1F              732             DEC R7
                     733             
039B                 734             REPEAT_SHIFT:
039B C3              735             CLR C
039C E528            736             MOV A, 0x28
039E 13              737             RRC A
039F F528            738             MOV 0x28, A
                     739             
03A1 C3              740             CLR C
03A2 E529            741             MOV A, 0x29
03A4 13              742             RRC A
03A5 F529            743             MOV 0x29, A
                     744             
03A7 C3              745             CLR C
03A8 E52A            746             MOV A, 0x2A
03AA 13              747             RRC A
03AB F52A            748             MOV 0x2A, A
                     749             
03AD DFEC            750             DJNZ R7, REPEAT_SHIFT
                     751             
                     752             ;SHIFT COMPLETE
                     753             
                     754             ;CLEAR
03AF 7520FF          755             MOV 0x20, #0xFF
03B2 7521FF          756             MOV 0x21, #0xFF
03B5 7522FF          757             MOV 0x22, #0xFF
                     758             
03B8 303205          759             JNB 0x26.2, ANTI_CLK
03BB 120510          760             LCALL TEMP_CLK
03BE 8003            761             SJMP RESUME_TRANSPOSE
                     762             
03C0                 763             ANTI_CLK:
03C0 120470          764             LCALL TEMP_ANTICLK
                     765             
03C3                 766             RESUME_TRANSPOSE:
                     767             ;ROTATE THE SHAPE REG TO ORIGINAL LOC
03C3 AF03            768             MOV R7, SHP_BIT_LOC
03C5 1F              769             DEC R7
                     770             
03C6                 771             REPEAT_SHIFT1:
                     772             
03C6 E520            773             MOV A, 0x20
03C8 23              774             RL A
03C9 F520            775             MOV 0x20, A
                     776             
03CB E521            777             MOV A, 0x21
03CD 23              778             RL A
03CE F521            779             MOV 0x21, A
                     780             
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    13

03D0 E522            781             MOV A, 0x22
03D2 23              782             RL A
03D3 F522            783             MOV 0x22, A
                     784             
03D5 DFEF            785             DJNZ R7, REPEAT_SHIFT1
                     786             
03D7 852028          787             MOV 0x28, 0x20
03DA 852129          788             MOV 0x29, 0x21
03DD 85222A          789             MOV 0x2A, 0x22
                     790     
                     791             ;ADD THE PATTERN 
03E0 A804            792             MOV R0, SHP_SRT_LOC
                     793             
03E2 E528            794             MOV A, 0x28
03E4 56              795             ANL A, @R0;PATTERN ADDED TO NEW LINE
03E5 F6              796             MOV @R0, A
                     797             
03E6 18              798             DEC R0
03E7 E529            799             MOV A, 0x29
03E9 56              800             ANL A, @R0;PATTERN ADDED TO NEW LINE
03EA F6              801             MOV @R0, A
                     802             
03EB 18              803             DEC R0
03EC E52A            804             MOV A, 0x2A
03EE 56              805             ANL A, @R0;PATTERN ADDED TO NEW LINE
03EF F6              806             MOV @R0, A
                     807             
                     808     
03F0 120600          809             LCALL PARTB
                     810     
03F3 22              811             RET
                     812             
0470                 813     ORG 470H
0470                 814             TEMP_ANTICLK:
                     815             
                     816             ;------- ROW 0 -----------
0470 204002          817             JB 0x28.0, SKIPP1
0473 C202            818             CLR 0x20.2
                     819             
0475                 820             SKIPP1:
0475 204102          821             JB 0x28.1, SKIPP2
0478 C20A            822             CLR 0x21.2
                     823             
047A                 824             SKIPP2:
047A 204202          825             JB 0x28.2, SKIPP3
047D C212            826             CLR 0x22.2
                     827             ;----- COMPLETE ----------
                     828             
047F                 829             SKIPP3:
                     830             ;------ ROW 1 ---------
047F 204802          831             JB 0x29.0, SKIPP4
0482 C201            832             CLR 0x20.1
                     833             
0484                 834             SKIPP4:
0484 204902          835             JB 0x29.1, SKIPP5
0487 C209            836             CLR 0x21.1
                     837             
0489                 838             SKIPP5:
0489 204A02          839             JB 0x29.2, SKIPP6
048C C211            840             CLR 0x22.1
                     841             ;----- COMPLETE ----------
                     842             
048E                 843             SKIPP6:
                     844             ;------ ROW 2 ---------
048E 205002          845             JB 0x2A.0, SKIPP7
0491 C200            846             CLR 0x20.0
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    14

                     847             
0493                 848             SKIPP7:
0493 205102          849             JB 0x2A.1, SKIPP8
0496 C208            850             CLR 0x21.0
                     851             
0498                 852             SKIPP8:
0498 205202          853             JB 0x2A.2, SKIPP9
049B C210            854             CLR 0x22.0
                     855             ;----- COMPLETE ----------
                     856             
049D                 857             SKIPP9:
                     858     
049D 22              859             RET
                     860             
0510                 861     ORG 510H
0510                 862             TEMP_CLK:
                     863             ;------- ROW 0 -----------
0510 204002          864             JB 0x28.0, SKIPP10
0513 C210            865             CLR 0x22.0
                     866             
0515                 867             SKIPP10:
0515 204102          868             JB 0x28.1, SKIPP11
0518 C208            869             CLR 0x21.0
                     870             
051A                 871             SKIPP11:
051A 204202          872             JB 0x28.2, SKIPP12
051D C200            873             CLR 0x20.0
                     874             ;----- COMPLETE ----------
                     875             
051F                 876             SKIPP12:
                     877             ;------ ROW 1 ---------
051F 204802          878             JB 0x29.0, SKIPP13
0522 C211            879             CLR 0x22.1
                     880             
0524                 881             SKIPP13:
0524 204902          882             JB 0x29.1, SKIPP14
0527 C209            883             CLR 0x21.1
                     884             
0529                 885             SKIPP14:
0529 204A02          886             JB 0x29.2, SKIPP15
052C C201            887             CLR 0x20.1
                     888             ;----- COMPLETE ----------
                     889             
052E                 890             SKIPP15:
                     891             ;------ ROW 2 ---------
052E 205002          892             JB 0x2A.0, SKIPP16
0531 C212            893             CLR 0x22.2
                     894             
0533                 895             SKIPP16:
0533 205102          896             JB 0x2A.1, SKIPP17
0536 C20A            897             CLR 0x21.2
                     898             
0538                 899             SKIPP17:
0538 205202          900             JB 0x2A.2, SKIPP18
053B C202            901             CLR 0x20.2
                     902             ;----- COMPLETE ----------
                     903             
053D                 904             SKIPP18:
053D 22              905             RET
                     906     
                     907     
0550                 908     ORG 550H
0550                 909             PARTA:
                     910             ;COUNT ALL THE 0s
0550 120300          911             LCALL COUNT_ZERO
0553 A804            912             MOV R0, SHP_SRT_LOC;
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    15

                     913             
                     914             ;USING LOC 30H TO 33H FOR BACKING UP CURRENT RAM
0555 8630            915             MOV 0x30, @R0
0557 18              916             DEC R0
0558 8631            917             MOV 0x31, @R0
055A 18              918             DEC R0
055B 8632            919             MOV 0x32, @R0
055D 18              920             DEC R0
055E 8633            921             MOV 0x33, @R0
                     922             
                     923             ;REMOVE THE CURRENT PATTERN
0560 A804            924             MOV R0, SHP_SRT_LOC     
                     925             
0562 E528            926             MOV A, 0x28
0564 F4              927             CPL A
0565 46              928             ORL A, @R0;PATTERN REMOVED FROM LINE 1
0566 F6              929             MOV @R0, A
                     930             
0567 18              931             DEC R0
0568 E529            932             MOV A, 0x29
056A F4              933             CPL A
056B 46              934             ORL A, @R0;PATTERN REMOVED FROM LINE 2
056C F6              935             MOV @R0, A
                     936             
056D 18              937             DEC R0
056E E52A            938             MOV A, 0x2A
0570 F4              939             CPL A
0571 46              940             ORL A, @R0;PATTERN REMOVED FROM LINE 3
0572 F6              941             MOV @R0, A
                     942     
                     943             ;BACKUP THE SHAPE PATTERN
0573 85282B          944             MOV 0x2B, 0x28
0576 85292C          945             MOV 0x2C, 0x29
0579 852A2D          946             MOV 0x2D, 0x2A
                     947             
057C 22              948             RET
                     949     
0600                 950     ORG 600H
0600                 951             PARTB:
                     952             ;CHECK IF THE COUNT IS SAME
0600 8A37            953             MOV COUNT_BACKUP, R2
0602 120300          954             LCALL COUNT_ZERO
0605 EA              955             MOV A, R2
0606 B53701          956             CJNE A,COUNT_BACKUP, CANCEL1
                     957     
                     958             ;------------------------------------
0609 22              959             RET
                     960             
060A                 961             CANCEL1:
060A D234            962             SETB 0x26.4
                     963             ;CANCEL THE OPERATION
060C E504            964             MOV A, SHP_SRT_LOC
060E F590            965             MOV P1, A
                     966             ;CJNE A, #0x7F, RESUME1
0610 C3              967             CLR C
0611 947E            968             SUBB A, #0x7E; SUBTRACT
0613 400B            969             JC RESUME1
                     970     
                     971             ;GAME OVER
                     972             ;SHOW THE SCORE STORED IN 0x43
                     973             ;MOV P1, 0x43
0615 75A804          974             MOV IE, #0x04; ONLY ENABLE INT1
0618 D2AF            975             SETB EA; ENABLE INTERRUPT
061A 3037FD          976             WAIT_FOR_RESTART: JNB 0x26.7, WAIT_FOR_RESTART
061D 020100          977             LJMP START
                     978             
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    16

                     979             
0620                 980             RESUME1:
0620 A804            981             MOV R0, SHP_SRT_LOC
                     982             
0622 A630            983             MOV @R0, 0x30
0624 18              984             DEC R0
0625 A631            985             MOV @R0, 0x31
0627 18              986             DEC R0
0628 A632            987             MOV @R0, 0x32
062A 18              988             DEC R0
062B A633            989             MOV @R0, 0x33
                     990     
062D 852B28          991             MOV 0x28, 0x2B
0630 852C29          992             MOV 0x29, 0x2C
0633 852D2A          993             MOV 0x2A, 0x2D
                     994             
0636 22              995             RET
                     996             
                     997     ;######################## I2C COMMANDS ###########################
                     998     
                     999     ;****************************************
                    1000     ;START CONDITION FOR I2C COMMUNICATION
                    1001     ;****************************************
                    1002     
0680                1003     ORG 0680H
0680                1004     STARTC:
0680 D2B6           1005             SETB SCL
0682 C2B7           1006             CLR SDA
0684 C2B6           1007             CLR SCL
0686 22             1008             RET
                    1009      
                    1010      
                    1011     ;*****************************************
                    1012     ;STOP CONDITION FOR I2C BUS
                    1013     ;*****************************************
                    1014     
0700                1015     ORG 0700H
0700                1016     STOP:
0700 C2B6           1017             CLR SCL
0702 C2B7           1018             CLR SDA
0704 D2B6           1019             SETB SCL
0706 D2B7           1020             SETB SDA
0708 22             1021             RET
                    1022             
                    1023     ;*****************************************
                    1024     ;SENDING DATA TO SLAVE ON I2C BUS
                    1025     ;*****************************************
                    1026     
0730                1027     ORG 0730H
0730                1028     SEND:
0730 7F08           1029             MOV R7,#08
0732                1030     BACK:
0732 C2B6           1031             CLR SCL
0734 33             1032             RLC A
0735 92B7           1033             MOV SDA,C
0737 D2B6           1034             SETB SCL
0739 DFF7           1035             DJNZ R7,BACK
073B C2B6           1036             CLR SCL
073D D2B7           1037             SETB SDA
073F D2B6           1038             SETB SCL
0741 A2B7           1039             MOV C, SDA
0743 C2B6           1040             CLR SCL
                    1041             
0745 22             1042             RET
                    1043      
                    1044      
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    17

                    1045     ;*****************************************
                    1046     ;ACK AND NAK FOR I2C BUS
                    1047     ;*****************************************
                    1048     
0750                1049     ORG 0750H
0750                1050     ACK:
0750 C2B7           1051             CLR SDA
0752 D2B6           1052             SETB SCL
0754 C2B6           1053             CLR SCL
0756 D2B7           1054             SETB SDA
0758 22             1055             RET
                    1056      
0770                1057     ORG 0770H
0770                1058     NAK:
0770 D2B7           1059             SETB SDA
0772 D2B6           1060             SETB SCL
0774 C2B6           1061             CLR SCL
0776 D2B6           1062             SETB SCL
0778 22             1063             RET
                    1064      
                    1065      
                    1066     ;*****************************************
                    1067     ;RECEIVING DATA FROM SLAVE ON I2C BUS
                    1068     ;*****************************************
                    1069     
0780                1070     ORG 0780H
0780                1071     RECV:
0780 7F08           1072             MOV R7,#08
0782                1073     BACK2:
0782 C2B6           1074             CLR SCL
0784 D2B6           1075             SETB SCL
0786 A2B7           1076             MOV C,SDA
0788 33             1077             RLC A
0789 DFF7           1078             DJNZ R7,BACK2
078B C2B6           1079             CLR SCL
                    1080             
078D 22             1081             RET
                    1082             
                    1083             
                    1084     ;============= SHAPES DEFINED HERE ===========
07A0                1085     ORG 7A0H
                    1086             ;TO ACCESS THIS DATA, USE MOVC A, @A + PC
                    1087             ;8 SHAPES DEFINED HERE
07A0                1088             GET_SHAPE:
07A0 04             1089             INC A; GET AROUND RET
07A1 83             1090             MOVC A, @A + PC
07A2 22             1091             RET
                    1092             
07A3                1093     ORG 7A3H
07A3 08             1094             DB 0x08;SHAPE 1 ADR OFFST [ADDR 0]
07A4 0B             1095             DB 0x0B;SHAPE 2 ADR OFFST [ADDR 1]
07A5 0E             1096             DB 0x0E;SHAPE 3 ADR OFFST [ADDR 2]
07A6 11             1097             DB 0x11;SHAPE 4 ADR OFFST [ADDR 3]
07A7 14             1098             DB 0x14;SHAPE 5 ADR OFFST [ADDR 4]
07A8 17             1099             DB 0x17;SHAPE 6 ADR OFFST [ADDR 5]
07A9 1A             1100             DB 0x1A;SHAPE 7 ADR OFFST [ADDR 6]
07AA 1D             1101             DB 0x1D;SHAPE 8 ADR OFFST [ADDR 7]
                    1102             
                    1103     ;           __
                    1104     ;        __|03|__
                    1105     ;       |04|03|02|
07AB F7             1106             DB 0xF7; [ADDR 8]
07AC E3             1107             DB 0xE3; [ADDR 9]
07AD FF             1108             DB 0xFF; [ADDR A]
                    1109     ;          __
                    1110     ;    __ __|02|
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    18

                    1111     ;   |04|03|02|
07AE FB             1112             DB 0xFB; [ADDR B]
07AF E3             1113             DB 0xE3; [ADDR C]
07B0 FF             1114             DB 0xFF; [ADDR D]
                    1115     ;          __
                    1116     ;   |04|__|02|
                    1117     ;   |04|03|02|
07B1 EB             1118             DB 0xEB; [ADDR E]
07B2 E3             1119             DB 0xE3; [ADDR F]
07B3 FF             1120             DB 0xFF; [ADDR 10]
                    1121     ;          __
                    1122     ;    __|03|02|
                    1123     ;   |04|03|02|
07B4 F3             1124             DB 0xF3; [ADDR 11]
07B5 E3             1125             DB 0xE3; [ADDR 12]
07B6 FF             1126             DB 0xFF; [ADDR 13]
                    1127     ;       __ __
                    1128     ;      |03|02|
                    1129     ;      |03|02|
07B7 F3             1130             DB 0xF3; [ADDR 14]
07B8 F3             1131             DB 0xF3; [ADDR 15]
07B9 FF             1132             DB 0xFF; [ADDR 16]
                    1133     ;          __
                    1134     ;    __ __|02|
                    1135     ;   |04|03|02|
                    1136     ;             |02|
07BA FB             1137             DB 0xFB; [ADDR 17]
07BB E3             1138             DB 0xE3; [ADDR 18]
07BC FB             1139             DB 0xFB; [ADDR 19]
                    1140     ;    __
                    1141     ;   |04|
                    1142     ;       |04|__
                    1143     ;       |04|03|
07BD EF             1144             DB 0xEF; [ADDR 1A]
07BE EF             1145             DB 0xEF; [ADDR 1B]
07BF E7             1146             DB 0xE7; [ADDR 1C]
                    1147     ;    __ __ __
                    1148     ;   |04|03|02|
07C0 FF             1149             DB 0xFF; [ADDR 1D]
07C1 E3             1150             DB 0xE3; [ADDR 1E]
07C2 FF             1151             DB 0xFF; [ADDR 1F]
                    1152                     
07D0                1153     ORG 7D0H
                    1154             ;SECOND SCORING METHOD
07D0                1155             CALC_SCORE2:
                    1156             ;MOVE THROUGH EACH ROW. IF A ROW IS 0x00, INC THE SCORE BY ONE AND MOVE ALL THE ABO
                             VE ROWS DOWN
                    1157             ;ROW STARTS FROM 0x6F AND GOES TILL 0x7F
07D0 796E           1158             MOV R1, #0x6E; INIT THE POINTER
                    1159             
07D2                1160             ROW_SCORE_CHECK:
07D2 09             1161             INC R1;
07D3 B97E02         1162             CJNE R1, #0x7E, CONT_SCANNING_SCORE; LAST GAME RAM
07D6 8018           1163             SJMP SCORE_CHECK_OVER
                    1164             
07D8                1165             CONT_SCANNING_SCORE:
07D8 B700F7         1166             CJNE @R1, #0x00, ROW_SCORE_CHECK; ROW IS FILLED.
                    1167             ;ROW FILLED FOUND.
                    1168             ;INC THE SCORE BY 1
07DB 0543           1169             INC 0x43
07DD C2B5           1170             CLR DISP_CLK
07DF D2B5           1171             SETB DISP_CLK
                    1172             
07E1 E9             1173             MOV A, R1
07E2 F8             1174             MOV R0, A
07E3 08             1175             INC R0
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    19

                    1176             
07E4 757FFF         1177             MOV 0x7F, #0xFF; CLEAR THE TOP REGISTER
                    1178             
                    1179             ;MOVE DOWN ALL THE ROWS
07E7                1180             REPEAT_ROW_DOWN:
07E7 E6             1181             MOV A, @R0
07E8 F7             1182             MOV @R1, A
07E9 08             1183             INC R0
07EA 09             1184             INC R1
07EB B97FF9         1185             CJNE R1, #0x7F, REPEAT_ROW_DOWN
                    1186             
                    1187             ;SCORE CHECK DOWN. REPEAT
07EE 80E0           1188             SJMP CALC_SCORE2
                    1189             
                    1190             
07F0                1191             SCORE_CHECK_OVER:
07F0 22             1192             RET
                    1193     END
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    20

SYMBOL TABLE LISTING
------ ----- -------


N A M E                   T Y P E  V A L U E   ATTRIBUTES

ACK. . . . . . . . . . .  C ADDR   0750H   A   
ANTI_CLK . . . . . . . .  C ADDR   03C0H   A   
BACK . . . . . . . . . .  C ADDR   0732H   A   
BACK2. . . . . . . . . .  C ADDR   0782H   A   
CALC_SCORE . . . . . . .  C ADDR   02A0H   A   
CALC_SCORE2. . . . . . .  C ADDR   07D0H   A   
CANCEL1. . . . . . . . .  C ADDR   060AH   A   
CHECK_NEXT_BTN0. . . . .  C ADDR   01A6H   A   
CHECK_NEXT_BTN1. . . . .  C ADDR   01B2H   A   
CHECK_NEXT_BTN2. . . . .  C ADDR   01BAH   A   
CHECK_NEXT_BTN3. . . . .  C ADDR   01C2H   A   
CHECK_SWITCH_STATE . . .  C ADDR   0179H   A   
CHECK_ZEROS. . . . . . .  C ADDR   02A5H   A   
CLK. . . . . . . . . . .  B ADDR   00A0H.1 A   
CLK_MOVEMENT . . . . . .  C ADDR   0395H   A   
CLR_SCORE. . . . . . . .  B ADDR   00A0H.2 A   
CONT_CYCLE . . . . . . .  C ADDR   0045H   A   
CONT_SCANNING_SCORE. . .  C ADDR   07D8H   A   
COUNT_BACKUP . . . . . .  N NUMB   0037H   A   
COUNT_ZERO . . . . . . .  C ADDR   0300H   A   
DAT. . . . . . . . . . .  B ADDR   00A0H.0 A   
DELAY. . . . . . . . . .  C ADDR   0150H   A   
DISPLAY. . . . . . . . .  C ADDR   0165H   A   
DISP_CLK . . . . . . . .  B ADDR   00B0H.5 A   
DONE_BTN_MOVEMENT. . . .  C ADDR   01C9H   A   
DOWN_MOVEMENT. . . . . .  C ADDR   021FH   A   
EA . . . . . . . . . . .  B ADDR   00A8H.7 A   
F0 . . . . . . . . . . .  B ADDR   00D0H.5 A   
GET_SHAPE. . . . . . . .  C ADDR   07A0H   A   
GO_BACK_DISP . . . . . .  C ADDR   01E2H   A   
HIGH_SPEED . . . . . . .  C ADDR   01DAH   A   
IE . . . . . . . . . . .  D ADDR   00A8H   A   
INFINITE_DISP. . . . . .  C ADDR   0169H   A   
IT0. . . . . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . . . . .  B ADDR   0088H.2 A   
LEFT_MOVEMENT. . . . . .  C ADDR   0320H   A   
NAK. . . . . . . . . . .  C ADDR   0770H   A   
NEXT_CMD_CONT. . . . . .  C ADDR   0347H   A   
NEXT_CMD_CONT1 . . . . .  C ADDR   037CH   A   
P0 . . . . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . . . . .  D ADDR   00B0H   A   
PARTA. . . . . . . . . .  C ADDR   0550H   A   
PARTB. . . . . . . . . .  C ADDR   0600H   A   
RECV . . . . . . . . . .  C ADDR   0780H   A   
REPEAT . . . . . . . . .  C ADDR   002EH   A   
REPEAT_AGAIN . . . . . .  C ADDR   0306H   A   
REPEAT_COUNT . . . . . .  C ADDR   0309H   A   
REPEAT_CYCLE . . . . . .  C ADDR   0026H   A   
REPEAT_RAM_CLEAR . . . .  C ADDR   0105H   A   
REPEAT_ROW_DOWN. . . . .  C ADDR   07E7H   A   
REPEAT_SHIFT . . . . . .  C ADDR   039BH   A   
REPEAT_SHIFT1. . . . . .  C ADDR   03C6H   A   
RESTART_CHECK. . . . . .  C ADDR   0173H   A   
RESUME1. . . . . . . . .  C ADDR   0620H   A   
RESUME_AGAIN . . . . . .  C ADDR   0245H   A   
RESUME_TASK. . . . . . .  C ADDR   01CFH   A   
RESUME_TRANSPOSE . . . .  C ADDR   03C3H   A   
RETURN_FROM_DISPLAY_SUBR  C ADDR   0047H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 11/02/2024 11:37:59 PAGE    21

RI . . . . . . . . . . .  B ADDR   0098H.0 A   
RIGHT_MOVEMENT . . . . .  C ADDR   0355H   A   
ROW_SCORE_CHECK. . . . .  C ADDR   07D2H   A   
SBUF . . . . . . . . . .  D ADDR   0099H   A   
SCL. . . . . . . . . . .  B ADDR   00B0H.6 A   
SCON . . . . . . . . . .  D ADDR   0098H   A   
SCORE_CHECK_OVER . . . .  C ADDR   07F0H   A   
SDA. . . . . . . . . . .  B ADDR   00B0H.7 A   
SEND . . . . . . . . . .  C ADDR   0730H   A   
SERIAL_SCORE . . . . . .  C ADDR   0245H   A   
SHP_BIT_LOC. . . . . . .  N NUMB   0003H   A   
SHP_COUNT. . . . . . . .  N NUMB   0024H   A   
SHP_SRT_LOC. . . . . . .  N NUMB   0004H   A   
SKIPP1 . . . . . . . . .  C ADDR   0475H   A   
SKIPP10. . . . . . . . .  C ADDR   0515H   A   
SKIPP11. . . . . . . . .  C ADDR   051AH   A   
SKIPP12. . . . . . . . .  C ADDR   051FH   A   
SKIPP13. . . . . . . . .  C ADDR   0524H   A   
SKIPP14. . . . . . . . .  C ADDR   0529H   A   
SKIPP15. . . . . . . . .  C ADDR   052EH   A   
SKIPP16. . . . . . . . .  C ADDR   0533H   A   
SKIPP17. . . . . . . . .  C ADDR   0538H   A   
SKIPP18. . . . . . . . .  C ADDR   053DH   A   
SKIPP2 . . . . . . . . .  C ADDR   047AH   A   
SKIPP3 . . . . . . . . .  C ADDR   047FH   A   
SKIPP4 . . . . . . . . .  C ADDR   0484H   A   
SKIPP5 . . . . . . . . .  C ADDR   0489H   A   
SKIPP6 . . . . . . . . .  C ADDR   048EH   A   
SKIPP7 . . . . . . . . .  C ADDR   0493H   A   
SKIPP8 . . . . . . . . .  C ADDR   0498H   A   
SKIPP9 . . . . . . . . .  C ADDR   049DH   A   
SKIP_FIRST_METH. . . . .  C ADDR   02B0H   A   
SKIP_INC . . . . . . . .  C ADDR   030DH   A   
SKIP_SCORE_INC . . . . .  C ADDR   02AEH   A   
SKIP_SPEED_CHK . . . . .  C ADDR   01E5H   A   
STAGE_2_DISPLAY. . . . .  C ADDR   0035H   A   
START. . . . . . . . . .  C ADDR   0100H   A   
STARTC . . . . . . . . .  C ADDR   0680H   A   
STOP . . . . . . . . . .  C ADDR   0700H   A   
TEMP_ANTICLK . . . . . .  C ADDR   0470H   A   
TEMP_CLK . . . . . . . .  C ADDR   0510H   A   
TH1. . . . . . . . . . .  D ADDR   008DH   A   
TL0. . . . . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . . . . .  D ADDR   008BH   A   
TMOD . . . . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . . . . .  B ADDR   0088H.6 A   
WAIT . . . . . . . . . .  C ADDR   0152H   A   
WAIT_FOR_RESTART . . . .  C ADDR   061AH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
